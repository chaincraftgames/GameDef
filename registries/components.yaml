action:
  description: Links an action to an entity.  Actions are active behaviors that require input or decision from the user (or AI for non-player entities). They have a direct impact on the game state and often have a graphical representation (like an animation). They can be enabled or disabled, providing a dynamic aspect to the gameplay.  Actions may be standard actions or may be introduced as part of a mechanic.
  schema: /schemas/components/action_component_schema.json
board:
  description: Link a board to an entity.  A board is a game asset with spaces that can be filled with game pieces.  Boards are used in games to represent game worlds, levels, maps, and other spatial arrangements of game elements.  
  schema: /schemas/components/board_component_schema.json
deck:
  description: Link a deck to an entity.  A deck is a collection of cards that can be drawn from and returned to.  Decks are used in card games, board games, and other games that involve drawing from a pool of items.  Decks can be shuffled, sorted, and manipulated in various ways.
  schema: /schemas/components/deck_component_schema.json
card_instances:
  description: Link a set of card instance to an entity.  A card instance is a specific card in a deck.  Card instances can have properties, such as a name, image, or value, that describe the card.  Card instances are used in card games to represent individual cards that can be drawn, played, and discarded.
  schema: /schemas/components/card_instances_component_schema.json
inventory:
  description: Link an inventory to an entity.  An inventory is a collection of items that can be added to, removed from, and manipulated in various ways.  Inventories are used in games to represent a player's hand, a pool of resources, a collection of items, or any other set of objects that can be interacted with.
  schema: /schemas/components/inventory_component_schema.json
  runtime_properties:
    - id: count
      type: integer
      default: 0
mechanic:
  description: Link a mechanic to an entity.  Mechanics are elements of gameplay that are game independent and are resusable across games.  Mechanics can be simple or complex, and can be used to create a wide variety of gameplay experiences.
  schema: /schemas/components/mechanic_component_schema.json
property_set:
  description: Define a set of properties for an entity.  A property set is a collection of properties that describe an entity.  Properties can be used to store information about an entity, such as its name, health, score, or any other attribute that can be represented as a value.
  schema: /schemas/components/property_set_component_schema.json
scoring:
  description: Link a scoring component to an entity.  Scoring components are used to calculate scores based on input properties and output the result to an output property.  Scoring components can be used to calculate scores for players, teams, or any other entity that needs to be scored.
  schema: /schemas/components/scoring_component_schema.json
team:
  description: Link a team to an entity.  A team is a group of players or non-players that work together to achieve a common goal.  Teams can have properties, roles, and other attributes that define how they interact with the game world.  Teams are used in games to create cooperative gameplay experiences and to organize players into groups.
  schema: /schemas/components/team_component_schema.json
image:
  description: Link an image to an entity.  Images are used to represent entities in the game world.  Images can be static or animated, and can be used to represent characters, objects, backgrounds, or any other visual element in the game.
  schema: /schemas/components/image_component_schema.json
allocator:
  description: Link an allocator to an entity.  Allocators are used to allocate items from an inventory to a board.  Allocators can be used to fill board spaces with game pieces and keep them full as long as there are items in the inventory.  
  schema: /schemas/components/allocator_component_schema.json
transition:
  description: Link a transition to an entity.  Transitions are used to move the game state from one state to another based on a condition. 
  schema: /schemas/components/transition_component_schema.json
transition_trigger:
  description: Link a transition to an entity.  Transitions are used to move the game state from one state to another based on a condition. 
  schema: /schemas/components/transition_trigger_component_schema.json
end_state:
  description: Link a victory condition to an entity.  Victory conditions are used to determine when the game has been won.  Victory conditions can be based on a variety of criteria, such as the number of points scored, the number of items collected, or the number of enemies defeated.
  schema: /schemas/components/end_state_component_schema.json

