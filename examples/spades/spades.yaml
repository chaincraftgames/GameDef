includes:
  - ../examples/standard_deck.yaml

functions:
  calculate_score: 
    parameters:
      bid: number
      tricks_taken: object
    return: number
    code: |
      if tricks_taken < bid then
        return -10 * bid
      else
        return 10 * bid + (tricks_taken - bid)
      end

roles:
  - id: player
    min: 2
    max: 4
    components:
      - type: inventory
        id: hand
        properties:
          max_size: 13
          min_size: 0

      - type: inventory
        id: player_tricks_taken
        properties:
          max_size: 13
          min_size: 0

      - type: property_set
        id: player_properties
        properties:
          bid: 0
          score: 0

  - id: team
    min: 2
    max: 2
    components:
      - type: property_set
        id: team_properties
        properties:
          bid: 0
          score: 0

      - type: inventory
        id: team_tricks_taken
        properties:
          max_size: 13
          min_size: 0

game:
  components:
    - type: property_set
      id: config
      properties:
        player_count: 4
        score_limit: 100
        fixed_rounds: 10

    - type: property_set
      id: game_state
      properties:
        trump_card: null

    - type: inventory 
      id: deal_inventory
      properties:
        max_size: 52
        min_size: 0

    - type: deck
      properties:
        id: deck
        $deck: { $deck_ref: standard_deck}
        $inventory: { $inventory_ref: deal_inventory }

    - type: inventory 
      id: played_cards
      properties:
        max_size: 4
        min_size: 0

    - type: team
      properties:
          $player_role: { $role_ref: player}
          $team_role: { $role_ref: team} 
          player_count:
            min: 1
            max: 2
          aggregator:
            - $input: { $component_ref: player_properties, $property_ref: bid }
              $output: { $component_ref: team_properties, $property_ref: bid }
            - $input: { $component_ref: player_tricks_taken, $property_ref: items }
              $output: { $component_ref: team_tricks_taken, $property_ref: items }

    - type: mechanic
      mechanic: trump
      properties:
        $inventory: { $inventory_ref: played_cards }
        trump_properties:
          - $property: { $component_ref: card, $property_ref: suit }
            value: spade
          - $property: { $component_ref: card, $property_ref: rank }
            order: ascending
        trump_output: { $component_ref: game_state, $property_ref: trump_card }
            
    - type: mechanic
      mechanic: trick
      properties:
        $trump_property: { $component_ref: game_state, $property_ref: trump_card }
        $played_inventory: { $inventory_ref: played_cards }
        $tricks_taken_inventory: { $component_ref: player_tricks_taken, $property_ref: items }

actions:
  - id: bid_on_tricks
    action: player_prompt
    properties:
      prompt: "How many tricks will you take?"
      $property: { $component_ref: player_properties, $property_ref: bid }

  - id: reset_deck
    action: move_between_inventories
    properties:
      $from_inventory: { $inventory_ref: team_tricks_taken }
      $to_inventory: { $inventory_ref: deal_inventory }
      count: all

  - id: shuffle_deck
    action: shuffle_inventory
    properties:
      $inventory: { $inventory_ref: deal_inventory }

  - id: deal
    action: move_between_inventories
    properties:
      $from_inventory: { $inventory_ref: deal_inventory }
      $to_inventory: { $inventory_ref: hand }
      count: 1

  - id: play_card
    action: move_between_inventories
    properties:
      $from_inventory: { $inventory_ref: hand }
      $to_inventory: { $inventory_ref: played_cards }

rounds:
  - id: prepare_for_deal
    $player_role:  { $role_ref: team }
    components:
      - type: action
        properties:
          action: { $action_ref: reset_deck }
          
  - id: deal_round
    $player_role:  { $role_ref: player }
    components:
      - type: action
        properties:
          action: { $action_ref: deal }

  - id: bidding_round
    $player_role: { $role_ref: player }
    components:
      - type: action
        properties:
          action: { $action_ref: bid_on_tricks }

  - id: outer_round
    $player_role: { $role_ref: player }
    components:
      - type: scoring
        properties:
          $input_properties:
            $tricks_taken: { $component_ref: player_tricks_taken, $property_ref: items }
            $bid: { $component_ref: player_properties, $property_ref: bid }
          $output_property: { $component_ref: player_properties, $property_ref: score }
          $calculator: { $function_ref: calculate_score }
      
  - id: inner_round
    $player_role: { $role_ref: player }
    components:
      - type: action
        properties:
          action: { $action_ref: play_card }

flow:
  - start
  - repeat:
    - round: { $round_ref: prepare_for_deal }
      end_condition: 
        rounds_played: 1
    - action: { $action_ref: shuffle_deck }
    - round: { $round_ref: deal_round }
      end_condition: 
        rounds_played: 13
    - round: { $round_ref: bidding_round }
      end_condition: each_player_once
    - round: { $round_ref: outer_round }
      repeat:
        - round: { $round_ref: inner_round }
          end_condition: 
            rounds_played: 1
      end_condition: 
        rounds_played: 13
  - end_condition:
      or:
        $score_limit: { $component_ref: config, $property_ref: score_limit }
        $rounds_played: { $component_ref: config, $property_ref: fixed_rounds }
  - end
 
      
            
  
  
 

